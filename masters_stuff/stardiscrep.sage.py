
# This file was *autogenerated* from the file stardiscrep.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_70 = Integer(70); _sage_const_101 = Integer(101); _sage_const_p01 = RealNumber('.01')###############################################
## compute/estimate the star discrepancy of the theta 
## twiddles. Need to look at intervals of the 
## form [0, x_i) \times [0, y_i)
################################################


def compute_points(N, f1, f2):
    datapts = []
    for n in range(_sage_const_1 , N+_sage_const_1 ):
        f1_temp = (float(n*f1) % float(pi))
        f1_twid = f1_temp/float(pi)
        f2_temp = (float(n*f2) % float(pi))
        f2_twid = f2_temp/float(pi)
        P = (f1_twid, f2_twid)
        datapts.append(P)
    return datapts
def count_pts_in_interval(x, y, points):
    numpts = _sage_const_0 
    for pt in points:
        if pt[_sage_const_0 ] < x and pt[_sage_const_1 ] < y:
            numpts = numpts + _sage_const_1 
    return numpts
p = _sage_const_101 
N = _sage_const_70 
t1 = _sage_const_7 
t2 = _sage_const_1 
f1 = arccos(t1/(_sage_const_2 *sqrt(p)))
f2 = arccos(t2/(_sage_const_2 *sqrt(p)))
thetapoints = compute_points(N, f1, f2)
stepsize = _sage_const_p01 
xs = [stepsize*j for j in range(_sage_const_1 , _sage_const_1 /stepsize +_sage_const_1  )]
ys = [stepsize*j for j in range(_sage_const_1 , _sage_const_1 /stepsize +_sage_const_1  )]
worstx = _sage_const_0 
worsty = _sage_const_0 
sup = _sage_const_0 
for x in xs:
    for y in ys:
        ptcount = count_pts_in_interval(x, y, thetapoints)
        dis_xy = ptcount/N - x*y
        if dis_xy>sup:
            worstx = x
            worsty = y
            sup = dis_xy
print("for N = " + str(N) + " t1 = " + str(t1) + " t2 = " + str(t2))
print("normalized t1 = " + str((t1/(_sage_const_2 *sqrt(p))).n()) + " t2 = " + str((t2/(_sage_const_2 *sqrt(p))).n()))
print("estimate of star discrepancy is " + str(sup))
print("at x = " + str(worstx) + " y = " + str(worsty))
plt = plot(points(thetapoints))
#plt.show(xmin=0, xmax=1, ymin=0, ymax=1)
plt.show(xmin=_sage_const_0 , xmax=_sage_const_1 , ymin=_sage_const_0 , ymax=_sage_const_1 , title = "t1="+str(t1)+" t2=" + str(t2) + " N=" + str(N) + " p=" + str(p))

