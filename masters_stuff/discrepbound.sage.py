
# This file was *autogenerated* from the file discrepbound.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_100 = Integer(100); _sage_const_9 = Integer(9); _sage_const_19 = Integer(19)
def compute_rh(h):
    prod = _sage_const_1 
    for hi in h:
        temp = max(_sage_const_1 , abs(hi))
        prod = prod*temp
    return prod
def get_lattice_pts(H):
    hs = []
    for h1 in range(-H, H+_sage_const_1 ):
        for h2 in range(-H, H+_sage_const_1 ):
            vec = vector((h1, h2))
            if h1 ==_sage_const_0  and h2 ==_sage_const_0 :
                continue
            hs.append(vec)
            print(vec)
    return hs
H = _sage_const_1 
p = _sage_const_19 
N = _sage_const_100 
trace1 = _sage_const_3 
trace2 = -_sage_const_2 
frob1 = arccos(trace1/(_sage_const_2 *sqrt(p)))
frob2 = arccos(trace2/(_sage_const_2 *sqrt(p)))
frobvec = vector((frob1, frob2))
hs = get_lattice_pts(H)
s = _sage_const_0 
for h in hs:
    ex = exp(_sage_const_2 *i*(frobvec.dot_product(h)))
    denom = _sage_const_1  - ex
    numerator = ex*(_sage_const_1 -ex**N)
    frac = abs(numerator/denom)
    r = compute_rh(h)
    term = (_sage_const_1 /r)*(_sage_const_1 /N)*(frac)
    s = s + term
print("For H = " + str(H))
print("sum part is " + str(s.n()))
discrepbound = (_sage_const_9 /_sage_const_4 )*(_sage_const_2 /(H+_sage_const_1 ) + s)
print("discrepancy bound is " + str(discrepbound.n()))

