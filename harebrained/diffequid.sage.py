
# This file was *autogenerated* from the file diffequid.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_500 = Integer(500); _sage_const_p05 = RealNumber('.05'); _sage_const_19 = Integer(19)
def get_diffs(f1, f2, N, epsilon):
    numlessep = _sage_const_0 
    diffs = []
    pts = []
    for n in range(_sage_const_1 , N+_sage_const_1 ):
        #nf1 = (float(n*f1) % float(pi))/(float(pi))
        #nf2 = (float(n*f2) % float(pi))/(float(pi))
        #d = abs(nf1 - nf2)
        #d = nf1 - nf2
        temp = (float(n*f1) - float(n*f2)) % float(pi)  
        d = temp/(float(pi))
        if d < epsilon:
            numlessep = numlessep + _sage_const_1 
        diffs.append(d)
        pts.append((d, _sage_const_1 ))
    return [diffs, pts, numlessep]
def do_all_traces(p, N, epsilon):
    for t1 in range(-floor(sqrt(p)), floor(sqrt(p)) + _sage_const_1 ):
        for t2 in range(t1, floor(_sage_const_2 *sqrt(p)) + _sage_const_1 ):
            if (t1 == _sage_const_0  and t2 == _sage_const_0 ) or (t1 == t2) or (t1 == -t2):
                continue
            f1 = arccos(t1/(_sage_const_2 *sqrt(p)))
            f2 = arccos(t2/(_sage_const_2 *sqrt(p)))
            temp = get_diffs(f1, f2, N, epsilon)
            diffs = temp[_sage_const_0 ]
            pts = temp[_sage_const_1 ]
            numlessep = temp[_sage_const_2 ]
            print("for N = " + str(N) + " t1 = " + str(t1) + " t2 = " + str(t2))
            print("proportion less than " + str(epsilon) + " is " + str((numlessep/N).n()))
def do_single_pair(t1, t2, p, N, epsilon):
    f1 = arccos(t1/(_sage_const_2 *sqrt(p)))
    f2 = arccos(t2/(_sage_const_2 *sqrt(p)))
    temp = get_diffs(f1, f2, N, epsilon)
    diffs = temp[_sage_const_0 ]
    pts = temp[_sage_const_1 ]
    numlessep = temp[_sage_const_2 ]
    #print("for p = " + str(p))
    print("for N = " + str(N) + " t1 = " + str(t1) + " t2 = " + str(t2))
    print("proportion less than " + str(epsilon) + " is " + str((numlessep/N).n()))
    show(histogram(diffs))
    show(plot(points(pts)))

p = _sage_const_19 
N = _sage_const_500 
epsilon = _sage_const_p05 
t1 = _sage_const_1 
t2 = _sage_const_3 
do_single_pair(t1, t2, p, N, epsilon)
#do_all_traces(p, N, epsilon)



